apiVersion: v1
kind: Secret
metadata:
  name: "beeai-platform-secret"
  labels:
    app: beeai-platform-server
    {{- include "beeai-platform.labels" . | nindent 4 }}
type: Opaque
data:
  {{- if (empty .Values.encryptionKey) }}
  {{fail ".Values.encryptionKey is missing, please generate one using: python3 -c 'from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())'"}}
  {{- else }}
  encryptionKey: {{.Values.encryptionKey | b64enc | quote}}
  {{- end }}
  sqlConnection: {{ printf "postgresql+asyncpg://%s:%s@%s:%s/%s"
       (include "beeai.databaseUser" .)
       (include "beeai.databasePassword" .)
       (include "beeai.databaseHost" .)
       (include "beeai.databasePort" .)
       (include "beeai.databaseName" .)
       | b64enc | quote
  }}
  {{- if and .Values.postgresql.enabled .Values.postgresql.auth.enablePostgresUser }}
  sqlConnectionSuperuser: {{ printf "postgresql+asyncpg://%s:%s@%s:%s/%s"
       (include "beeai.databaseAdminUser" .)
       (include "beeai.databaseAdminPassword" .)
       (include "beeai.databaseHost" .)
       (include "beeai.databasePort" .)
       (include "beeai.databaseName" .)
       | b64enc | quote
  }}
  {{- end }}
  {{- if and .Values.auth.enabled .Values.auth.basic.enabled (empty .Values.auth.basic.adminPassword) }}
  {{fail ".Values.auth.basic.adminPassword is missing, please add password."}}
  {{- else }}
  adminPassword: {{ .Values.auth.basic.adminPassword | b64enc | quote }}
  {{ end }}
  {{- if and .Values.auth.enabled (empty .Values.auth.jwtSecretKey) }}
  {{fail ".Values.auth.jwtSecretKey is missing, please a secret key"}}
  {{- else }}
  jwtSecretKey: {{ .Values.auth.jwtSecretKey | b64enc | quote }}
  {{ end }}
  s3AccessKeyId: {{ include "beeai.s3.accessKeyID" . | b64enc | quote }}
  s3AccessKeySecret: {{ include "beeai.s3.accessKeySecret" . | b64enc | quote }}
