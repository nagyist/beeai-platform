/**
 * Copyright 2025 Â© BeeAI a Series of LF Projects, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/acp/agents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Agents */
    get: operations['list_agents_api_v1_acp_agents_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/acp/agents/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Agent */
    get: operations['read_agent_api_v1_acp_agents__name__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/acp/runs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create Run */
    post: operations['create_run_api_v1_acp_runs_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/acp/runs/{run_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Run */
    get: operations['read_run_api_v1_acp_runs__run_id__get'];
    put?: never;
    /** Resume Run */
    post: operations['resume_run_api_v1_acp_runs__run_id__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/acp/runs/{run_id}/cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cancel Run */
    post: operations['cancel_run_api_v1_acp_runs__run_id__cancel_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/env': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Env */
    get: operations['list_env_api_v1_env_get'];
    /** Update Env */
    put: operations['update_env_api_v1_env_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/env/sync': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Sync Provider Repository
     * @description Sync external changes to an env repository.
     */
    put: operations['sync_provider_repository_api_v1_env_sync_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Providers */
    get: operations['list_providers_api_v1_provider_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Delete Provider */
    post: operations['delete_provider_api_v1_provider_delete_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/install': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Install Provider */
    post: operations['install_provider_api_v1_provider_install_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/logs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stream Logs */
    get: operations['stream_logs_api_v1_provider_logs_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/preview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Preview Provider */
    post: operations['preview_provider_api_v1_provider_preview_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/register/managed': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create Managed Provider */
    post: operations['create_managed_provider_api_v1_provider_register_managed_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/provider/register/unmanaged': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add Unmanaged Provider */
    post: operations['add_unmanaged_provider_api_v1_provider_register_unmanaged_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/telemetry': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Config */
    get: operations['read_config_api_v1_telemetry_get'];
    /** Update Config */
    put: operations['update_config_api_v1_telemetry_put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Agent */
    Agent: {
      /** Description */
      description?: string | null;
      /** @default {
       *       "env": []
       *     } */
      metadata: components['schemas']['Metadata'];
      /** Name */
      name: string;
    } & {
      [key: string]: unknown;
    };
    /** AgentReadResponse */
    AgentReadResponse: {
      /** Description */
      description?: string | null;
      /** @default {
       *       "env": []
       *     } */
      metadata: components['schemas']['Metadata'];
      /** Name */
      name: string;
    } & {
      [key: string]: unknown;
    };
    /** AgentsListResponse */
    AgentsListResponse: {
      /** Agents */
      agents: components['schemas']['Agent'][];
    };
    /** AnyModel */
    AnyModel: {
      [key: string]: unknown;
    };
    /** Author */
    Author: {
      /** Email */
      email?: string | null;
      /** Name */
      name: string;
      /** Url */
      url?: string | null;
    };
    /** Contributor */
    Contributor: {
      /** Email */
      email?: string | null;
      /** Name */
      name: string;
      /** Url */
      url?: string | null;
    };
    /** CreateManagedProviderRequest */
    CreateManagedProviderRequest: {
      /** Location */
      location: components['schemas']['GithubProviderLocation'] | components['schemas']['DockerImageProviderLocation'];
    };
    /** Dependency */
    Dependency: {
      /** Name */
      name: string;
      type: components['schemas']['DependencyType'];
    };
    /**
     * DependencyType
     * @enum {string}
     */
    DependencyType: 'agent' | 'tool' | 'model';
    /** DockerImageID */
    DockerImageID: string;
    /** DockerImageProviderLocation */
    DockerImageProviderLocation: components['schemas']['DockerImageID'];
    /** EnvVar */
    EnvVar: {
      /** Description */
      description?: string | null;
      /** Name */
      name: string;
      /**
       * Required
       * @default false
       */
      required: boolean;
    };
    /** Error */
    Error: {
      code: components['schemas']['ErrorCode'];
      /** Message */
      message: string;
    };
    /**
     * ErrorCode
     * @enum {string}
     */
    ErrorCode: 'server_error' | 'invalid_input' | 'not_found';
    /** GithubProviderLocation */
    GithubProviderLocation: components['schemas']['GithubUrl'];
    /** GithubUrl */
    GithubUrl: string;
    /**
     * GithubVersionType
     * @enum {string}
     */
    GithubVersionType: 'head' | 'tag';
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** InstallProviderRequest */
    InstallProviderRequest: {
      /** Id */
      id?: string | null;
      /** Location */
      location?:
        | components['schemas']['GithubProviderLocation']
        | components['schemas']['DockerImageProviderLocation']
        | null;
    };
    /** Link */
    Link: {
      type: components['schemas']['LinkType'];
      /**
       * Url
       * Format: uri
       */
      url: string;
    };
    /**
     * LinkType
     * @enum {string}
     */
    LinkType: 'source-code' | 'container-image' | 'homepage' | 'documentation';
    /** ListEnvSchema */
    ListEnvSchema: {
      /** Env */
      env: {
        [key: string]: string;
      };
    };
    /**
     * LoadedProviderStatus
     * @enum {string}
     */
    LoadedProviderStatus: 'not_installed' | 'install_error' | 'installing' | 'starting' | 'ready' | 'running' | 'error';
    /** LoadProviderErrorMessage */
    LoadProviderErrorMessage: {
      /** Message */
      message: string;
    };
    /** Message */
    Message: {
      /** Parts */
      parts: components['schemas']['MessagePart'][];
    };
    /** MessageAwaitRequest */
    MessageAwaitRequest: {
      message: components['schemas']['Message'];
      /**
       * Type
       * @default message
       * @constant
       */
      type: 'message';
    };
    /** MessageAwaitResume */
    MessageAwaitResume: {
      message: components['schemas']['Message'];
      /**
       * Type
       * @default message
       * @constant
       */
      type: 'message';
    };
    /** MessagePart */
    MessagePart: {
      /** Content */
      content?: string | null;
      /**
       * Content Encoding
       * @default plain
       */
      content_encoding: ('plain' | 'base64') | null;
      /**
       * Content Type
       * @default text/plain
       */
      content_type: string | null;
      /** Content Url */
      content_url?: string | null;
      /** Name */
      name?: string | null;
    } & {
      [key: string]: unknown;
    };
    /** Metadata */
    Metadata: {
      annotations?: components['schemas']['AnyModel'] | null;
      author?: components['schemas']['Author'] | null;
      /** Contributors */
      contributors?: components['schemas']['Contributor'][] | null;
      /** Created At */
      created_at?: string | null;
      /** Dependencies */
      dependencies?: components['schemas']['Dependency'][] | null;
      /** Documentation */
      documentation?: string | null;
      /**
       * Env
       * @description For configuration -- passed to the process
       */
      env?: components['schemas']['EnvVar'][];
      /** Framework */
      framework?: string | null;
      /** License */
      license?: string | null;
      /** Links */
      links?: components['schemas']['Link'][] | null;
      /** Natural Languages */
      natural_languages?: string[] | null;
      /** Programming Language */
      programming_language?: string | null;
      /** Provider */
      provider?: string | null;
      /** Recommended Models */
      recommended_models?: string[] | null;
      /** Tags */
      tags?: string[] | null;
      /** Ui */
      ui?: {
        [key: string]: unknown;
      } | null;
      /** Updated At */
      updated_at?: string | null;
      /** Use Cases */
      use_cases?: string[] | null;
    } & {
      [key: string]: unknown;
    };
    /** PaginatedResponse[ProviderWithStatus] */
    PaginatedResponse_ProviderWithStatus_: {
      /** Items */
      items: components['schemas']['ProviderWithStatus'][];
      /** Total Count */
      total_count: number;
    };
    /** ProviderManifest */
    ProviderManifest: {
      /** Agents */
      agents: components['schemas']['Agent'][];
    } & {
      [key: string]: unknown;
    };
    /** ProviderWithStatus */
    ProviderWithStatus: {
      /** Id */
      id: string;
      last_error?: components['schemas']['LoadProviderErrorMessage'] | null;
      manifest: components['schemas']['ProviderManifest'];
      /** Missing Configuration */
      missing_configuration?: components['schemas']['EnvVar'][];
      registry?: components['schemas']['ResolvedGithubUrl'] | null;
      status: components['schemas']['LoadedProviderStatus'];
    } & {
      [key: string]: unknown;
    };
    /** RegisterUnmanagedProviderRequest */
    RegisterUnmanagedProviderRequest: {
      /** Id */
      id: string;
      /**
       * Location
       * Format: uri
       */
      location: string;
    };
    /** ResolvedGithubUrl */
    ResolvedGithubUrl: {
      /** Commit Hash */
      commit_hash: string;
      /** Org */
      org: string;
      /** Path */
      path?: string | null;
      /** Repo */
      repo: string;
      /** Version */
      version: string;
      version_type: components['schemas']['GithubVersionType'];
    };
    /** RunCancelResponse */
    RunCancelResponse: {
      /** Agent Name */
      agent_name: string;
      await_request?: components['schemas']['MessageAwaitRequest'] | null;
      error?: components['schemas']['Error'] | null;
      /**
       * Outputs
       * @default []
       */
      outputs: components['schemas']['Message'][];
      /**
       * Run Id
       * Format: uuid
       */
      run_id?: string;
      /** Session Id */
      session_id?: string | null;
      /** @default created */
      status: components['schemas']['RunStatus'];
    };
    /** RunCreateRequest */
    RunCreateRequest: {
      /** Agent Name */
      agent_name: string;
      /** Inputs */
      inputs: components['schemas']['Message'][];
      /** @default sync */
      mode: components['schemas']['RunMode'];
      /** Session Id */
      session_id?: string | null;
    };
    /** RunCreateResponse */
    RunCreateResponse: {
      /** Agent Name */
      agent_name: string;
      await_request?: components['schemas']['MessageAwaitRequest'] | null;
      error?: components['schemas']['Error'] | null;
      /**
       * Outputs
       * @default []
       */
      outputs: components['schemas']['Message'][];
      /**
       * Run Id
       * Format: uuid
       */
      run_id?: string;
      /** Session Id */
      session_id?: string | null;
      /** @default created */
      status: components['schemas']['RunStatus'];
    };
    /**
     * RunMode
     * @enum {string}
     */
    RunMode: 'sync' | 'async' | 'stream';
    /** RunReadResponse */
    RunReadResponse: {
      /** Agent Name */
      agent_name: string;
      await_request?: components['schemas']['MessageAwaitRequest'] | null;
      error?: components['schemas']['Error'] | null;
      /**
       * Outputs
       * @default []
       */
      outputs: components['schemas']['Message'][];
      /**
       * Run Id
       * Format: uuid
       */
      run_id?: string;
      /** Session Id */
      session_id?: string | null;
      /** @default created */
      status: components['schemas']['RunStatus'];
    };
    /** RunResumeRequest */
    RunResumeRequest: {
      await_resume: components['schemas']['MessageAwaitResume'];
      mode: components['schemas']['RunMode'];
    };
    /** RunResumeResponse */
    RunResumeResponse: {
      /** Agent Name */
      agent_name: string;
      await_request?: components['schemas']['MessageAwaitRequest'] | null;
      error?: components['schemas']['Error'] | null;
      /**
       * Outputs
       * @default []
       */
      outputs: components['schemas']['Message'][];
      /**
       * Run Id
       * Format: uuid
       */
      run_id?: string;
      /** Session Id */
      session_id?: string | null;
      /** @default created */
      status: components['schemas']['RunStatus'];
    };
    /**
     * RunStatus
     * @enum {string}
     */
    RunStatus: 'created' | 'in-progress' | 'awaiting' | 'cancelling' | 'cancelled' | 'completed' | 'failed';
    /** UpdateEnvRequest */
    UpdateEnvRequest: {
      /** Env */
      env: {
        [key: string]: string | null;
      };
    };
    /** UpdateTelemetryConfigRequest */
    UpdateTelemetryConfigRequest: {
      /** Sharing Enabled */
      sharing_enabled: boolean;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  list_agents_api_v1_acp_agents_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AgentsListResponse'];
        };
      };
    };
  };
  read_agent_api_v1_acp_agents__name__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AgentReadResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_run_api_v1_acp_runs_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RunCreateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RunCreateResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_run_api_v1_acp_runs__run_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        run_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RunReadResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  resume_run_api_v1_acp_runs__run_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        run_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RunResumeRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RunResumeResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  cancel_run_api_v1_acp_runs__run_id__cancel_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        run_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RunCancelResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_env_api_v1_env_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ListEnvSchema'];
        };
      };
    };
  };
  update_env_api_v1_env_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEnvRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  sync_provider_repository_api_v1_env_sync_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  list_providers_api_v1_provider_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PaginatedResponse_ProviderWithStatus_'];
        };
      };
    };
  };
  delete_provider_api_v1_provider_delete_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstallProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  install_provider_api_v1_provider_install_post: {
    parameters: {
      query?: {
        stream?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstallProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  stream_logs_api_v1_provider_logs_get: {
    parameters: {
      query: {
        /** @description Provider ID */
        id: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  preview_provider_api_v1_provider_preview_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateManagedProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderWithStatus'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_managed_provider_api_v1_provider_register_managed_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateManagedProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderWithStatus'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  add_unmanaged_provider_api_v1_provider_register_unmanaged_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterUnmanagedProviderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_config_api_v1_telemetry_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  update_config_api_v1_telemetry_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTelemetryConfigRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
